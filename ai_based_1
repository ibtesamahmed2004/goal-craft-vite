import { useState, useEffect, useRef } from 'react'
import { v4 as uuidv4 } from 'uuid'
import { FaEdit, FaPlus, FaSearch, FaMoon, FaSun, FaChevronDown, FaChevronUp } from 'react-icons/fa'
import { MdDelete, MdPriorityHigh, MdOutlineCalendarToday, MdLabel } from 'react-icons/md'
import { BiTask } from 'react-icons/bi'
import { IoMdCheckmarkCircleOutline } from 'react-icons/io'
import Navbar from './components/Navbar'

// Motivational quotes database
const MOTIVATIONAL_QUOTES = [
  "The secret of getting ahead is getting started.",
  "You don't have to be great to start, but you have to start to be great.",
  "Small steps every day lead to big results.",
  "Productivity is never an accident. It's always the result of a commitment to excellence.",
  "Focus on being productive instead of busy.",
  "Your future is created by what you do today, not tomorrow.",
  "The way to get started is to quit talking and begin doing.",
  "Success is the sum of small efforts repeated day in and day out.",
  "The key is not to prioritize what's on your schedule, but to schedule your priorities.",
  "Do the hard jobs first. The easy jobs will take care of themselves."
]

const PRIORITIES = {
  high: { label: 'High', color: 'bg-red-500', icon: <MdPriorityHigh className="inline" /> },
  medium: { label: 'Medium', color: 'bg-yellow-500', icon: <MdPriorityHigh className="inline" /> },
  low: { label: 'Low', color: 'bg-green-500', icon: <MdPriorityHigh className="inline" /> }
}

const CATEGORIES = {
  personal: { label: 'Personal', color: 'bg-blue-500' },
  work: { label: 'Work', color: 'bg-purple-500' },
  home: { label: 'Home', color: 'bg-green-500' },
  health: { label: 'Health', color: 'bg-pink-500' },
  education: { label: 'Education', color: 'bg-indigo-500' }
}

function App() {
  const [todo, setTodo] = useState("")
  const [todos, setTodos] = useState([])
  const [showFinished, setShowFinished] = useState(true)
  const [darkMode, setDarkMode] = useState(false)
  const [searchTerm, setSearchTerm] = useState("")
  const [selectedCategory, setSelectedCategory] = useState("")
  const [selectedPriority, setSelectedPriority] = useState("")
  const [dueDate, setDueDate] = useState("")
  const [subtaskInput, setSubtaskInput] = useState("")
  const [expandedTask, setExpandedTask] = useState(null)
  const [sortConfig, setSortConfig] = useState({ key: 'dueDate', direction: 'ascending' })
  const [motivationalQuote] = useState(MOTIVATIONAL_QUOTES[Math.floor(Math.random() * MOTIVATIONAL_QUOTES.length)])
  
  const searchInputRef = useRef(null)
  const todoInputRef = useRef(null)

  // Load todos from localStorage on initial render
  useEffect(() => {
    const savedTodos = localStorage.getItem("todos")
    if (savedTodos) {
      setTodos(JSON.parse(savedTodos))
    }
    
    // Check user's preferred color scheme
    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
      setDarkMode(true)
    }
  }, [])

  // Save todos to localStorage whenever they change
  useEffect(() => {
    localStorage.setItem("todos", JSON.stringify(todos))
  }, [todos])

  // Keyboard shortcuts
  useEffect(() => {
    const handleKeyDown = (e) => {
      // Ctrl+F to focus search
      if (e.ctrlKey && e.key === 'f') {
        e.preventDefault()
        searchInputRef.current?.focus()
      }
      // Ctrl+N to focus new todo input
      if (e.ctrlKey && e.key === 'n') {
        e.preventDefault()
        todoInputRef.current?.focus()
      }
    }

    window.addEventListener('keydown', handleKeyDown)
    return () => window.removeEventListener('keydown', handleKeyDown)
  }, [])

  const toggleDarkMode = () => {
    setDarkMode(!darkMode)
  }

  const toggleFinished = () => {
    setShowFinished(!showFinished)
  }

  const toggleTaskExpansion = (id) => {
    setExpandedTask(expandedTask === id ? null : id)
  }

  const handleAdd = () => {
    if (todo.trim().length < 3) return
    
    const newTodo = {
      id: uuidv4(),
      todo: todo.trim(),
      isCompleted: false,
      category: selectedCategory,
      priority: selectedPriority,
      dueDate: dueDate,
      subtasks: [],
      createdAt: new Date().toISOString()
    }
    
    setTodos([...todos, newTodo])
    setTodo("")
    setSelectedCategory("")
    setSelectedPriority("")
    setDueDate("")
  }

  const handleEdit = (id) => {
    const taskToEdit = todos.find(t => t.id === id)
    if (!taskToEdit) return
    
    setTodo(taskToEdit.todo)
    setSelectedCategory(taskToEdit.category)
    setSelectedPriority(taskToEdit.priority)
    setDueDate(taskToEdit.dueDate)
    
    // Remove the task being edited
    setTodos(todos.filter(item => item.id !== id))
    
    // Focus the input
    todoInputRef.current?.focus()
  }

  const handleDelete = (id) => {
    setTodos(todos.filter(item => item.id !== id))
  }

  const handleCheckbox = (id) => {
    setTodos(todos.map(item => 
      item.id === id ? { ...item, isCompleted: !item.isCompleted } : item
    ))
  }

  const handleSubtaskAdd = (taskId) => {
    if (!subtaskInput.trim()) return
    
    setTodos(todos.map(task => 
      task.id === taskId 
        ? { 
            ...task, 
            subtasks: [
              ...task.subtasks, 
              { id: uuidv4(), text: subtaskInput.trim(), isCompleted: false }
            ] 
          } 
        : task
    ))
    
    setSubtaskInput("")
  }

  const handleSubtaskToggle = (taskId, subtaskId) => {
    setTodos(todos.map(task => 
      task.id === taskId 
        ? { 
            ...task, 
            subtasks: task.subtasks.map(subtask => 
              subtask.id === subtaskId 
                ? { ...subtask, isCompleted: !subtask.isCompleted } 
                : subtask
            ) 
          } 
        : task
    ))
  }

  const handleSubtaskDelete = (taskId, subtaskId) => {
    setTodos(todos.map(task => 
      task.id === taskId 
        ? { 
            ...task, 
            subtasks: task.subtasks.filter(subtask => subtask.id !== subtaskId) 
          } 
        : task
    ))
  }

  const handleSort = (key) => {
    let direction = 'ascending'
    if (sortConfig.key === key && sortConfig.direction === 'ascending') {
      direction = 'descending'
    }
    setSortConfig({ key, direction })
  }

  const sortedTodos = [...todos].sort((a, b) => {
    if (a[sortConfig.key] < b[sortConfig.key]) {
      return sortConfig.direction === 'ascending' ? -1 : 1
    }
    if (a[sortConfig.key] > b[sortConfig.key]) {
      return sortConfig.direction === 'ascending' ? 1 : -1
    }
    return 0
  })

  const filteredTodos = sortedTodos.filter(todo => {
    const matchesSearch = todo.todo.toLowerCase().includes(searchTerm.toLowerCase())
    const matchesCompletion = showFinished || !todo.isCompleted
    const matchesCategory = !selectedCategory || todo.category === selectedCategory
    const matchesPriority = !selectedPriority || todo.priority === selectedPriority
    
    return matchesSearch && matchesCompletion && matchesCategory && matchesPriority
  })

  const getPriorityBadge = (priority) => {
    if (!priority) return null
    const { label, color, icon } = PRIORITIES[priority]
    return (
      <span className={`${color} text-white text-xs px-2 py-1 rounded-full flex items-center gap-1`}>
        {icon} {label}
      </span>
    )
  }

  const getCategoryBadge = (category) => {
    if (!category) return null
    const { label, color } = CATEGORIES[category]
    return (
      <span className={`${color} text-white text-xs px-2 py-1 rounded-full flex items-center gap-1`}>
        <MdLabel className="inline" /> {label}
      </span>
    )
  }

  const getDueDateBadge = (dueDate) => {
    if (!dueDate) return null
    
    const today = new Date()
    today.setHours(0, 0, 0, 0)
    const due = new Date(dueDate)
    due.setHours(0, 0, 0, 0)
    
    const diffTime = due - today
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24))
    
    let bgColor = 'bg-gray-500'
    let status = ''
    
    if (diffDays === 0) {
      bgColor = 'bg-red-500'
      status = 'Today'
    } else if (diffDays === 1) {
      bgColor = 'bg-orange-500'
      status = 'Tomorrow'
    } else if (diffDays < 0) {
      bgColor = 'bg-red-700'
      status = `${Math.abs(diffDays)}d overdue`
    } else if (diffDays <= 7) {
      bgColor = 'bg-yellow-500'
      status = `${diffDays}d`
    } else {
      bgColor = 'bg-green-500'
      status = `${due.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}`
    }
    
    return (
      <span className={`${bgColor} text-white text-xs px-2 py-1 rounded-full flex items-center gap-1`}>
        <MdOutlineCalendarToday className="inline" /> {status}
      </span>
    )
  }

  const getProgress = (subtasks) => {
    if (!subtasks || subtasks.length === 0) return null
    
    const completed = subtasks.filter(st => st.isCompleted).length
    const total = subtasks.length
    const percentage = Math.round((completed / total) * 100)
    
    return (
      <div className="w-full bg-gray-200 rounded-full h-2.5 dark:bg-gray-700 mt-1">
        <div 
          className="bg-blue-600 h-2.5 rounded-full" 
          style={{ width: `${percentage}%` }}
          title={`${completed} of ${total} subtasks completed`}
        ></div>
      </div>
    )
  }

  return (
    <div className={darkMode ? 'dark' : ''}>
      <div className="min-h-screen bg-gray-100 dark:bg-gray-900 transition-colors duration-300">
        <Navbar />
        
        <div className="container mx-auto px-4 py-6 md:px-6 lg:px-8">
          {/* Motivational Quote */}
          <div className="mb-6 p-4 bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg shadow-lg text-white">
            <p className="text-center italic">"{motivationalQuote}"</p>
          </div>
          
          <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
            {/* Sidebar - Filters */}
            <div className="lg:col-span-1">
              <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-4 sticky top-4">
                <h2 className="text-xl font-bold mb-4 dark:text-white">Filters</h2>
                
                {/* Dark Mode Toggle */}
                <div className="mb-4 flex items-center justify-between">
                  <span className="dark:text-gray-300">Dark Mode</span>
                  <button 
                    onClick={toggleDarkMode}
                    className={`relative inline-flex items-center h-6 rounded-full w-11 transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 ${darkMode ? 'bg-blue-600' : 'bg-gray-200'}`}
                  >
                    <span className={`inline-block w-4 h-4 transform transition-transform rounded-full bg-white ${darkMode ? 'translate-x-6' : 'translate-x-1'}`} />
                    {darkMode ? (
                      <FaMoon className="absolute left-1 text-white text-xs" />
                    ) : (
                      <FaSun className="absolute right-1 text-yellow-500 text-xs" />
                    )}
                  </button>
                </div>
                
                {/* Show Completed */}
                <div className="mb-4 flex items-center">
                  <input 
                    id="showCompleted"
                    type="checkbox" 
                    checked={showFinished}
                    onChange={toggleFinished}
                    className="w-4 h-4 text-blue-600 bg-gray-100 rounded border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600"
                  />
                  <label htmlFor="showCompleted" className="ml-2 text-sm font-medium text-gray-900 dark:text-gray-300">
                    Show Completed
                  </label>
                </div>
                
                {/* Category Filter */}
                <div className="mb-4">
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Category</label>
                  <select
                    value={selectedCategory}
                    onChange={(e) => setSelectedCategory(e.target.value)}
                    className="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white text-sm"
                  >
                    <option value="">All Categories</option>
                    {Object.entries(CATEGORIES).map(([key, { label }]) => (
                      <option key={key} value={key}>{label}</option>
                    ))}
                  </select>
                </div>
                
                {/* Priority Filter */}
                <div className="mb-4">
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Priority</label>
                  <select
                    value={selectedPriority}
                    onChange={(e) => setSelectedPriority(e.target.value)}
                    className="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white text-sm"
                  >
                    <option value="">All Priorities</option>
                    {Object.entries(PRIORITIES).map(([key, { label }]) => (
                      <option key={key} value={key}>{label}</option>
                    ))}
                  </select>
                </div>
                
                {/* Sorting */}
                <div className="mb-4">
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Sort By</label>
                  <div className="space-y-2">
                    <button
                      onClick={() => handleSort('todo')}
                      className={`w-full text-left px-3 py-1 text-sm rounded-md ${sortConfig.key === 'todo' ? 'bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-100' : 'hover:bg-gray-100 dark:hover:bg-gray-700'}`}
                    >
                      Name {sortConfig.key === 'todo' && (sortConfig.direction === 'ascending' ? '↑' : '↓')}
                    </button>
                    <button
                      onClick={() => handleSort('dueDate')}
                      className={`w-full text-left px-3 py-1 text-sm rounded-md ${sortConfig.key === 'dueDate' ? 'bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-100' : 'hover:bg-gray-100 dark:hover:bg-gray-700'}`}
                    >
                      Due Date {sortConfig.key === 'dueDate' && (sortConfig.direction === 'ascending' ? '↑' : '↓')}
                    </button>
                    <button
                      onClick={() => handleSort('priority')}
                      className={`w-full text-left px-3 py-1 text-sm rounded-md ${sortConfig.key === 'priority' ? 'bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-100' : 'hover:bg-gray-100 dark:hover:bg-gray-700'}`}
                    >
                      Priority {sortConfig.key === 'priority' && (sortConfig.direction === 'ascending' ? '↑' : '↓')}
                    </button>
                  </div>
                </div>
                
                {/* Stats */}
                <div className="mt-6 pt-4 border-t border-gray-200 dark:border-gray-700">
                  <h3 className="text-sm font-medium text-gray-500 dark:text-gray-400 mb-2">Statistics</h3>
                  <div className="space-y-1 text-sm">
                    <div className="flex justify-between">
                      <span className="text-gray-600 dark:text-gray-300">Total Tasks</span>
                      <span className="font-medium dark:text-white">{todos.length}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600 dark:text-gray-300">Completed</span>
                      <span className="font-medium dark:text-white">{todos.filter(t => t.isCompleted).length}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-600 dark:text-gray-300">Remaining</span>
                      <span className="font-medium dark:text-white">{todos.filter(t => !t.isCompleted).length}</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            
            {/* Main Content */}
            <div className="lg:col-span-3">
              {/* Search */}
              <div className="mb-6 relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <FaSearch className="text-gray-400" />
                </div>
                <input
                  ref={searchInputRef}
                  type="text"
                  placeholder="Search tasks..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-10 w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white py-2"
                />
                <div className="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                  <span className="text-gray-400 text-sm">{filteredTodos.length} tasks</span>
                </div>
              </div>
              
              {/* Add Task Form */}
              <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-4 mb-6">
                <h2 className="text-xl font-bold mb-4 dark:text-white">Add New Goal</h2>
                <div className="space-y-3">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Task Name</label>
                    <input
                      ref={todoInputRef}
                      type="text"
                      placeholder="What needs to be done?"
                      value={todo}
                      onChange={(e) => setTodo(e.target.value)}
                      className="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white py-2 px-3"
                    />
                  </div>
                  
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Category</label>
                      <select
                        value={selectedCategory}
                        onChange={(e) => setSelectedCategory(e.target.value)}
                        className="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white py-2 px-3"
                      >
                        <option value="">Select Category</option>
                        {Object.entries(CATEGORIES).map(([key, { label }]) => (
                          <option key={key} value={key}>{label}</option>
                        ))}
                      </select>
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Priority</label>
                      <select
                        value={selectedPriority}
                        onChange={(e) => setSelectedPriority(e.target.value)}
                        className="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white py-2 px-3"
                      >
                        <option value="">Select Priority</option>
                        {Object.entries(PRIORITIES).map(([key, { label }]) => (
                          <option key={key} value={key}>{label}</option>
                        ))}
                      </select>
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Due Date</label>
                      <input
                        type="date"
                        value={dueDate}
                        onChange={(e) => setDueDate(e.target.value)}
                        className="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white py-2 px-3"
                      />
                    </div>
                  </div>
                  
                  <button
                    onClick={handleAdd}
                    disabled={todo.length < 3}
                    className="w-full bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 disabled:opacity-50 disabled:cursor-not-allowed text-white font-bold py-2 px-4 rounded-md transition-all duration-200 flex items-center justify-center gap-2"
                  >
                    <FaPlus /> Add Goal
                  </button>
                </div>
              </div>
              
              {/* Task List */}
              <div className="space-y-4">
                <h2 className="text-xl font-bold dark:text-white">Your Goals</h2>
                
                {filteredTodos.length === 0 ? (
                  <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-8 text-center">
                    <BiTask className="mx-auto text-4xl text-gray-400 mb-3" />
                    <h3 className="text-lg font-medium text-gray-900 dark:text-white">No tasks found</h3>
                    <p className="text-gray-500 dark:text-gray-400 mt-1">
                      {searchTerm || selectedCategory || selectedPriority 
                        ? "Try adjusting your filters" 
                        : "Add your first goal to get started!"}
                    </p>
                  </div>
                ) : (
                  <ul className="space-y-3">
                    {filteredTodos.map(task => (
                      <li 
                        key={task.id} 
                        className={`bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden transition-all duration-200 ${task.isCompleted ? 'opacity-80' : 'opacity-100'}`}
                      >
                        <div className="p-4">
                          <div className="flex items-start">
                            <input
                              type="checkbox"
                              checked={task.isCompleted}
                              onChange={() => handleCheckbox(task.id)}
                              className="mt-1 h-5 w-5 text-blue-600 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600"
                            />
                            
                            <div className="ml-3 flex-1">
                              <div className="flex items-center justify-between">
                                <h3 className={`text-lg font-medium ${task.isCompleted ? 'line-through text-gray-500 dark:text-gray-400' : 'text-gray-900 dark:text-white'}`}>
                                  {task.todo}
                                </h3>
                                <button 
                                  onClick={() => toggleTaskExpansion(task.id)}
                                  className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300"
                                >
                                  {expandedTask === task.id ? <FaChevronUp /> : <FaChevronDown />}
                                </button>
                              </div>
                              
                              <div className="mt-2 flex flex-wrap gap-2">
                                {getPriorityBadge(task.priority)}
                                {getCategoryBadge(task.category)}
                                {getDueDateBadge(task.dueDate)}
                              </div>
                              
                              {task.subtasks?.length > 0 && (
                                <div className="mt-2 w-full">
                                  {getProgress(task.subtasks)}
                                </div>
                              )}
                            </div>
                            
                            <div className="ml-2 flex space-x-1">
                              <button
                                onClick={() => handleEdit(task.id)}
                                className="text-blue-500 hover:text-blue-700 dark:hover:text-blue-400 p-1 rounded-full hover:bg-blue-100 dark:hover:bg-gray-700 transition-colors"
                                title="Edit"
                              >
                                <FaEdit />
                              </button>
                              <button
                                onClick={() => handleDelete(task.id)}
                                className="text-red-500 hover:text-red-700 dark:hover:text-red-400 p-1 rounded-full hover:bg-red-100 dark:hover:bg-gray-700 transition-colors"
                                title="Delete"
                              >
                                <MdDelete />
                              </button>
                            </div>
                          </div>
                          
                          {expandedTask === task.id && (
                            <div className="mt-4 pl-8">
                              {/* Subtasks */}
                              {task.subtasks?.length > 0 && (
                                <div className="mb-4">
                                  <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Checklist</h4>
                                  <ul className="space-y-2">
                                    {task.subtasks.map(subtask => (
                                      <li key={subtask.id} className="flex items-center">
                                        <input
                                          type="checkbox"
                                          checked={subtask.isCompleted}
                                          onChange={() => handleSubtaskToggle(task.id, subtask.id)}
                                          className="h-4 w-4 text-blue-600 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600"
                                        />
                                        <span 
                                          className={`ml-2 text-sm ${subtask.isCompleted ? 'line-through text-gray-500 dark:text-gray-400' : 'text-gray-700 dark:text-gray-300'}`}
                                        >
                                          {subtask.text}
                                        </span>
                                        <button
                                          onClick={() => handleSubtaskDelete(task.id, subtask.id)}
                                          className="ml-auto text-red-400 hover:text-red-600 text-xs p-1"
                                        >
                                          <MdDelete />
                                        </button>
                                      </li>
                                    ))}
                                  </ul>
                                </div>
                              )}
                              
                              {/* Add Subtask */}
                              <div className="flex items-center mt-2">
                                <input
                                  type="text"
                                  placeholder="Add a subtask..."
                                  value={subtaskInput}
                                  onChange={(e) => setSubtaskInput(e.target.value)}
                                  onKeyPress={(e) => e.key === 'Enter' && handleSubtaskAdd(task.id)}
                                  className="flex-1 rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white text-sm py-1 px-2"
                                />
                                <button
                                  onClick={() => handleSubtaskAdd(task.id)}
                                  disabled={!subtaskInput.trim()}
                                  className="ml-2 bg-blue-500 hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed text-white rounded-md p-1 text-sm transition-colors"
                                >
                                  <FaPlus />
                                </button>
                              </div>
                              
                              {/* Task Details */}
                              <div className="mt-4 pt-2 border-t border-gray-200 dark:border-gray-700">
                                <div className="grid grid-cols-2 gap-4 text-sm">
                                  <div>
                                    <span className="text-gray-500 dark:text-gray-400">Created:</span>{' '}
                                    <span className="dark:text-white">
                                      {new Date(task.createdAt).toLocaleDateString()}
                                    </span>
                                  </div>
                                  {task.dueDate && (
                                    <div>
                                      <span className="text-gray-500 dark:text-gray-400">Due:</span>{' '}
                                      <span className="dark:text-white">
                                        {new Date(task.dueDate).toLocaleDateString()}
                                      </span>
                                    </div>
                                  )}
                                </div>
                              </div>
                            </div>
                          )}
                        </div>
                        
                        {task.isCompleted && (
                          <div className="bg-green-50 dark:bg-green-900/20 px-4 py-2 text-sm text-green-700 dark:text-green-300 flex items-center">
                            <IoMdCheckmarkCircleOutline className="mr-1" /> Completed
                          </div>
                        )}
                      </li>
                    ))}
                  </ul>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

export default App
